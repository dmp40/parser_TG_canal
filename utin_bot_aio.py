import asyncio
import asyncpg
import os
import logging
from aiogram import Bot, Dispatcher, types, F
#from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
from dotenv import load_dotenv

load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
db_host = os.getenv('DB_HOST')
db_port = os.getenv('DB_PORT')
db_user = os.getenv('DB_USER')
db_password = os.getenv('DB_PASSWORD')
db_name = os.getenv('DB_NAME')

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot_token = os.getenv('TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=bot_token)
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
async def connect_to_database():
    return await asyncpg.connect(
        user=db_user,
        password=db_password,
        host=db_host,
        port=db_port,
        database=db_name
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=["start"]))
async def send_welcome(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∏—Å–∫"
    button_1 = KeyboardButton(text='–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ üó∫')
    button_2 = KeyboardButton(text='–ü–æ–∏—Å–∫ üëÄ')
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
    keyboard = ReplyKeyboardMarkup(keyboard=[[button_1, button_2]], resize_keyboard=True)


    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª–µ–π title –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=keyboard)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç –ü–æ–∏—Å–∫
@dp.message(F.text == '–ü–æ–∏—Å–∫ üëÄ')
async def process_dog_answer(message: Message):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ 1-2 —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞' )

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
@dp.message(F.text == '–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ üó∫')
async def send_titles(message: types.Message):
    connection = None
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = await connect_to_database()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        titles = await connection.fetch("SELECT title, url FROM content")
        num = 0
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if titles:
            for title in titles:
                num += 1

                print(num)
                await message.answer(f"{title['title'][:200]}\n<a href='{title['url']}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>",
                                     parse_mode='HTML', disable_web_page_preview=True)
                await message.answer('-----------------------------------')
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ 1 —Å–µ–∫—É–Ω–¥—É)
                await asyncio.sleep(0.5)
                if num == 300:
                    break

        else:
            await message.reply("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error("Error occurred: %s", e)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if connection:
            await connection.close()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
# –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ "/start" –∏ "/help"
@dp.message()
async def send_echo(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        search_word = message.text
        print(f'–∏—â–µ–º {search_word}')

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = await connect_to_database()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—é title
        # search_query = """
        #     SELECT title, url FROM content
        #     WHERE to_tsvector('russian', post) @@ to_tsquery('russian', $1)
        # """
        # –ó–∞–ø—Ä–æ—Å —Å –ø–æ–∫–∞–∑–æ–º —Ç–µ–∫—Å—Ç–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
        search_query = """
             SELECT  ts_headline(
            'russian',
            title,
            to_tsquery('russian', $1),
            'StartSel=<u><i>üîª, StopSel=</i></u>üîª, MaxWords=35, MinWords=15,HighlightAll=true')


             title, url FROM content
             WHERE to_tsvector('russian', title) @@ to_tsquery('russian', $1)
        """



        search_results = await connection.fetch(search_query, search_word)
        print(f'–ù–∞–π–¥–µ–Ω–æ - {search_results}')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if search_results:
            for result in search_results:
                #await message.answer(f"{result['title'][:200]}\n{result['url']}", parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
                await message.answer(f"{result['title'][:200]}\n<a href='{result['url']}'>–í–∏–¥–µ–æ</a>",
                                     parse_mode="HTML", disable_web_page_preview=True)
                #await message.answer('‚óΩ‚óΩ‚óΩ‚óΩ‚óΩ‚óΩ‚óΩ‚óΩ‚óΩ')
                await message.answer('______________')
        else:
            await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except IndexError:
        await message.reply("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    except Exception as e:
        logging.error("Error occurred: %s", e)
    finally:
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if connection:
            await connection.close()






# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    dp.run_polling(bot)
